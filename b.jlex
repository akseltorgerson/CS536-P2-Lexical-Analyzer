import java_cup.runtime.*;

class TokenVal {
    int linenum;
    int charnum;
    TokenVal(int lnum, int cnum) {
        linenum = lnum;
        charnum = cnum;
    }
}

class IntLitTokenVal extends TokenVal {
    int intVal;
    IntLitTokenVal(int lnum, int cnum, int val) {
        super(lnum, cnum);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
    String idVal;
    IdTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
    String strVal;
    StrLitTokenVal(int lnum, int cnum, String val) {
        super(lnum, cnum);
        strVal = val;
    }
}

class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
LETTER=       [a-zA-Z]
WHITESPACE=   [\040\t]
DOT=          [.]
USCORE=       [_]
COMMENTS=     ["///""###"]
ESCAPEDCHARS= ["n""t"\'\""?"\\]
NOTESCAPEDCHAR = [^"n""t"\'\""?"\\]
DOUBLEQUOTE= [\"]
BACKSLASH=    [\\]
NEWLINE=      [\n]
NOTDOUBLEQ=   [^\"]
SINGLECHAR= [^\\\n\"]



%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"int"     { Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"if"      { Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"bool"    { Symbol S = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"void"    { Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"struct"   { Symbol S = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"receive" { Symbol S = new Symbol(sym.RECEIVE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 7;
            return S;
          }

"print"   { Symbol S = new Symbol(sym.PRINT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"else"   { Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"while"   { Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"tru"     { Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"fls"     { Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"ret"     { Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"{"       { Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S;
          }

"}"       { Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S;
          }

"("       { Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S;
          }

")"       { Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S;
          }
  
";"       { Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S;
          }

","       { Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S;
          }

"."       { Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return S;
          }

"<<"      { Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

">>"      { Symbol S = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"++"      { Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"--"      { Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"-"       { Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"*"       { Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"/"       { Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"!"       { Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"&&"      { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"||"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"=="      { Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"!="      { Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"<"       { Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

">"       { Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"<="      { Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

">="      { Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"="       { Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

{COMMENTS}.*  { CharNum.num = 1; }

{DIGIT}+  { double checkVal = (new Double(yytext())).doubleValue();
            if(checkVal > Integer.MAX_VALUE){
              ErrMsg.warn(yyline+1, CharNum.num, "integer literal too large; using max value");
              Symbol s1 = new Symbol(sym.INTLITERAL, new IntLitTokenVal(yyline+1, CharNum.num, Integer.MAX_VALUE));
              CharNum.num += yytext().length();
              return s1;
            }
            else{
              int val = (new Integer(yytext())).intValue();
              Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
              CharNum.num += yytext().length();
              return S;
            }
          }

({LETTER}|{USCORE})({LETTER}|{DIGIT}|{USCORE})* {
            Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return S;
          }
         
({DOUBLEQUOTE}(({BACKSLASH}{ESCAPEDCHARS})|({SINGLECHAR}))*{DOUBLEQUOTE}) {
    Symbol s = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
    CharNum.num += yytext().length();
    return s;
}

({DOUBLEQUOTE}(({BACKSLASH}{ESCAPEDCHARS})|({SINGLECHAR}))*)  {
  ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal ignored");
  CharNum.num += yytext().length();
}

({DOUBLEQUOTE}(({BACKSLASH}{ESCAPEDCHARS})|({SINGLECHAR})|({BACKSLASH}{NOTESCAPEDCHAR}))*{DOUBLEQUOTE}) {
    ErrMsg.fatal(yyline+1, CharNum.num, "string literal with bad escaped character ignored");
  	CharNum.num += yytext().length();
}

({DOUBLEQUOTE}(({BACKSLASH}{ESCAPEDCHARS})|({SINGLECHAR})|({BACKSLASH}{NOTESCAPEDCHAR})|({BACKSLASH}{NEWLINE}))*) {
    ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal with bad escaped character ignored");
  	CharNum.num += yytext().length();
}

.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }

